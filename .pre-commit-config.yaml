# Pre-commit hooks for OriginFD
# Ensures code quality and prevents common issues before commits

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.min\.(js|css)$'
      - id: end-of-file-fixer
        exclude: '\.min\.(js|css)$'
      - id: check-yaml
        args: ["--unsafe"] # Allow custom YAML tags
      - id: check-json
        exclude: '\.vscode/.*\.json$'
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ["--fix=lf"]

  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        language_version: python3
        files: '^services/.*\.py$'

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]
        files: '^services/.*\.py$'

  - repo: https://github.com/pycqa/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        files: '^services/.*\.py$'
        args:
          - "--max-line-length=88"
          - "--extend-ignore=E203,W503"
          - "--exclude=migrations,__pycache__,.git,build,dist"

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        files: '^services/.*\.py$'
        args: [--ignore-missing-imports, --check-untyped-defs]
        additional_dependencies:
          - types-redis
          - types-requests
          - sqlalchemy[mypy]

  # Python security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        files: '^services/.*\.py$'
        exclude: '^services/.*/test_.*\.py$|.*_test\.py$' # Exclude test files
        args: [-r, --skip, B101] # Skip assert_used test

  # JavaScript/TypeScript formatting and linting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: '\.(js|jsx|ts|tsx|json|css|scss|md|yaml|yml)$'
        exclude: '(node_modules|\.next|dist|build|coverage|\.pnpm-debug\.log)'

  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v9.15.0
    hooks:
      - id: eslint
        files: '\.(js|jsx|ts|tsx)$'
        exclude: '(node_modules|\.next|dist|build|coverage)'
        args: [--fix, --max-warnings=0]
        additional_dependencies:
          - eslint@8.57.1
          - "@typescript-eslint/eslint-plugin@6.21.0"
          - "@typescript-eslint/parser@6.21.0"
          - eslint-config-next@14.0.4
          - eslint-config-prettier@9.1.2

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        files: "Dockerfile.*"
        args: [--ignore, DL3008, --ignore, DL3009] # Ignore apt version pinning

  # Security scanning
  - repo: https://github.com/trufflesecurity/trufflehog
    rev: v3.87.2
    hooks:
      - id: trufflehog
        name: TruffleHog
        description: Detect secrets in your data.
        args: [--since-commit=HEAD, --only-verified, --fail]
        stages: ["pre-commit", "pre-push"]

  # Dependency vulnerability scanning
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: 'requirements.*\.txt$'

  # Custom hooks for project-specific checks
  - repo: local
    hooks:
      # TypeScript compilation check
      - id: typescript-check
        name: TypeScript Compilation Check
        entry: bash -c 'cd apps/web && pnpm type-check'
        language: system
        files: '\.(ts|tsx)$'
        exclude: '(node_modules|\.next|dist|build)'
        pass_filenames: false

      # pnpm lockfile sync check
      - id: pnpm-lockfile-sync
        name: pnpm Lockfile Sync Check
        entry: bash -c 'pnpm install --frozen-lockfile'
        language: system
        files: '(package\.json|pnpm-lock\.yaml)$'
        pass_filenames: false

      # Database migration check
      - id: migration-check
        name: Database Migration Check
        entry: bash -c 'cd services/api && python -c "from alembic.config import Config; from alembic import command; cfg = Config(\"alembic.ini\"); command.check(cfg)" || echo "Migration check skipped - no database connection"'
        language: system
        files: "^services/api/(models|alembic)/"
        pass_filenames: false

      # Docker build test
      - id: docker-build-test
        name: Docker Build Test
        entry: bash -c 'docker build --no-cache -f Dockerfile . -t originfd-test:latest && docker rmi originfd-test:latest'
        language: system
        files: '(Dockerfile|docker-compose\.yml|\.dockerignore)'
        pass_filenames: false

      # API client generation check
      - id: api-client-check
        name: API Client Generation Check
        entry: bash -c 'node scripts/generate-api-client.js --check-only || echo "API client check skipped - no running API server"'
        language: system
        files: "^(services/api|packages/ts/http-client)/"
        pass_filenames: false

      # Environment file validation
      - id: env-file-check
        name: Environment File Validation
        entry: bash -c 'python scripts/validate-env.py || echo "Environment validation skipped"'
        language: system
        files: '\.env.*'
        pass_filenames: false

# Configuration
ci:
  autofix_prs: true
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [docker-build-test, api-client-check, migration-check] # Skip resource-intensive checks in CI
  submodules: false
