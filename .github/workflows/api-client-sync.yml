name: OpenAPI Client Sync

on:
  # Trigger on API changes
  push:
    paths:
      - 'services/api/**'
      - '!services/api/README.md'
  pull_request:
    paths:
      - 'services/api/**'
      - '!services/api/README.md'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_generation:
        description: 'Force client regeneration even if no changes detected'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

  # Weekly sync to catch any drift
  schedule:
    - cron: '0 2 * * 1'  # Monday at 2 AM UTC

jobs:
  detect-api-changes:
    name: Detect API Changes
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      force-generation: ${{ github.event.inputs.force_generation == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for API changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'services/api/**/*.py'
              - 'services/api/requirements.txt'
              - 'services/api/Dockerfile'

  generate-client:
    name: Generate and Validate API Client
    runs-on: ubuntu-latest
    needs: detect-api-changes
    if: needs.detect-api-changes.outputs.api-changed == 'true' || needs.detect-api-changes.outputs.force-generation == 'true' || github.event_name == 'schedule'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: originfd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd services/api
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          npm ci
          npm install -g @openapitools/openapi-generator-cli

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/originfd_test
        run: |
          cd services/api
          # Run database migrations if they exist
          if [ -f "alembic.ini" ]; then
            alembic upgrade head
          fi

      - name: Start API server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/originfd_test
          ENVIRONMENT: test
        run: |
          cd services/api
          python main.py &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          timeout 60s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:8000/health)" != "200" ]]; do sleep 2; done'

      - name: Generate OpenAPI client
        run: |
          npm run generate:api-client

      - name: Stop API server
        if: always()
        run: |
          if [ -n "$API_PID" ]; then
            kill $API_PID || true
          fi

      - name: Analyze client changes
        id: analyze
        run: |
          # Check if generated client differs from current client
          if [ -d "generated/api-client" ]; then
            echo "Generated client found"

            # Compare method counts and coverage
            if [ -f "generated/api-client/generation-report.json" ]; then
              COVERAGE=$(jq -r '.validation.coverage' generated/api-client/generation-report.json)
              ENDPOINTS=$(jq -r '.endpoints' generated/api-client/generation-report.json)
              MISSING_METHODS=$(jq -r '.validation.missingMethods' generated/api-client/generation-report.json)

              echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
              echo "endpoints=$ENDPOINTS" >> $GITHUB_OUTPUT
              echo "missing_methods=$MISSING_METHODS" >> $GITHUB_OUTPUT

              # Check if coverage is below threshold
              COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
              if (( $(echo "$COVERAGE_NUM < 95" | bc -l) )); then
                echo "needs_update=true" >> $GITHUB_OUTPUT
              else
                echo "needs_update=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "needs_update=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload generation artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-client-generation
          path: |
            generated/api-client/
            temp/openapi.json
          retention-days: 7

      - name: Create Issue for Low Coverage
        if: steps.analyze.outputs.needs_update == 'true' && github.event_name != 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const coverage = '${{ steps.analyze.outputs.coverage }}';
            const missing = ${{ steps.analyze.outputs.missing_methods }};
            const endpoints = '${{ steps.analyze.outputs.endpoints }}';

            const issueBody = `
            ## 🚨 API Client Sync Alert

            The OpenAPI client generation detected potential drift between the backend API and frontend client.

            ### Coverage Report
            - **Current Coverage**: ${coverage}
            - **API Endpoints**: ${endpoints}
            - **Missing Methods**: ${missing.length}

            ### Missing Methods
            ${missing.length > 0 ? missing.map(m => \`- \${m}\`).join('\\n') : 'None'}

            ### Next Steps
            1. Review the generated client in the workflow artifacts
            2. Update the existing \`packages/ts/http-client/src/index.ts\` with missing methods
            3. Add tests for new API endpoints
            4. Run \`npm run generate:api-client\` locally to verify

            ### Workflow Run
            [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ---
            *This issue was automatically created by the API Client Sync workflow*
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `API Client Sync Required - Coverage ${coverage}`,
              body: issueBody,
              labels: ['api-sync', 'needs-attention', 'typescript']
            });

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const coverage = '${{ steps.analyze.outputs.coverage }}';
            const missing = ${{ steps.analyze.outputs.missing_methods }}';
            const endpoints = '${{ steps.analyze.outputs.endpoints }}';

            const comment = `
            ## 📊 OpenAPI Client Analysis

            Your API changes have been analyzed for client compatibility:

            - **Client Coverage**: ${coverage}
            - **API Endpoints**: ${endpoints}
            - **New/Missing Methods**: ${JSON.parse(missing).length}

            ${JSON.parse(missing).length > 0 ?
              \`### ⚠️ Action Required\\nThe following methods may need to be added to the frontend client:\\n\${JSON.parse(missing).map(m => \`- \${m}\`).join('\\n')}\` :
              '### ✅ No Action Required\\nAll API endpoints are covered by the existing client.'
            }

            **Download** the generated client from the workflow artifacts to review the changes.
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  validate-build:
    name: Validate Build Integration
    runs-on: ubuntu-latest
    needs: generate-client
    if: always() && needs.generate-client.result != 'skipped'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download generated client
        uses: actions/download-artifact@v3
        with:
          name: api-client-generation
          path: generated/

      - name: Type check with generated client
        run: |
          # Temporarily copy generated types to check compatibility
          if [ -d "generated/api-client/models" ]; then
            cp -r generated/api-client/models packages/ts/http-client/src/generated-models/
            npm run type-check
          fi

      - name: Build verification
        run: |
          npm run build